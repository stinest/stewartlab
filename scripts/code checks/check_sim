import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statistics
from scipy.stats import norm

# setting files for analysis
directory = './../sims/W24/'
top_name = directory + '3arm_4SE/GUAC.top'
dat_name = directory + '3arm_4SE/trajectory_sim.dat'

# reading in topology+data files into data frames
df_top = pd.read_csv(top_name, delimiter=' ', names=range(4), header=0)
df_dat = pd.read_csv(dat_name, delimiter=' ', header=None, names=range(3), usecols=[0,1,2])

# VAR+FUNC DEFINITIONS
l_se = 5            # of nucleotides in sticky ends, counting unpaired base(s)
l_core = 2          # of unpaired bases at the core
N_arm = 3           # of arms in nanostar

N = len(df_top[0])          # of nucleotides in nanostar
l_strand = len(df_top[0][df_top[0] == 1])           # strand length
l_arm = int((l_strand - (l_se + l_core))/2)         # arm length
N_strand = int(N/l_strand)          # of strands in nanostar

N_conf = (df_dat[0].values == 't').sum()            # of configurations in the given data file
box_size = df_dat.iloc[1,2]         # box size

# function that finds 2 nucleotide indices at arm
def find_indices(df):
    strand_indice = l_strand - l_se - 1
    strand_indice2 = strand_indice + 1
    selected_strand_indices = [strand_indice, strand_indice2]
        
    return selected_strand_indices

# function that calculates arm length between two indices
def calculate_dr(df):
    std_coords = df.iloc[indices[0], -3:]
    std2_coords = df.iloc[indices[1], -3:]
    std_vector = std_coords - std2_coords
    std_array = np.array(std_vector)
    return np.linalg.norm(std_array)

def calculate_d(df, df2, i):
    std_coords = df.iloc[indices[i], -3:]
    std2_coords = df2.iloc[indices[i], -3:]
    std_vector = std_coords - std2_coords
    std_array = np.array(std_vector)
    return np.linalg.norm(std_array)    

## CODE IMPLEMENTATION


# partitioning the data of each configuration
df_conf = [[] for i in range(N_conf)]
for i in range(N_conf):
    df_conf[i] = df_dat.iloc[i*N + (i+1)*3:(i+1)*N + (i+1)*3, 0:3]
    df_conf[i].reset_index(inplace=True)
    # convert dataframe to numerical values
    df_conf[i][0] = df_conf[i][0].astype(float)
    df_conf[i][1] = df_conf[i][1].astype(float)
    
indices = find_indices(df_top)      # finds indices

comparison_results = []

for i in range(N_conf - 1):
    dr = calculate_dr(df_conf[i])
    d1 = calculate_d(df_conf[i], df_conf[i + 1], 0)
    d2 = calculate_d(df_conf[i], df_conf[i + 1], 1)
    comparison_results.append(dr < d1 and dr < d2)

avg_length_dr = np.mean([calculate_dr(df) for df in df_conf])
avg_length_d1 = np.mean([calculate_d(df_conf[i], df_conf[i + 1], 0) for i in range(N_conf - 1)])
avg_length_d2 = np.mean([calculate_d(df_conf[i], df_conf[i + 1], 1) for i in range(N_conf - 1)])

final_conclusion = sum(comparison_results) > len(comparison_results) / 2

print("Average dr: ", avg_length_dr)
print("Average d1: ", avg_length_d1)
print("Average d2: ", avg_length_d2)
print("Is dr < d1 and d2 for all configurations?: ", final_conclusion)

